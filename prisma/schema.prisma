datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String      @id @default(uuid()) @db.Uuid
  email      String      @unique @db.Text
  name       String?     @unique @db.Text 
  membership String      @default("free")
  password   String?     @db.Text
  avatarUrl  String?     @db.Text @map("avatar_url")
  flashcards Flashcard[]
  decks      Deck[]
  generations Generation[]
  stickers   Sticker[]
  streak     Int         @default(0)
  lastLogin  DateTime?   @map("last_login")
  joinedAt   DateTime    @default(now()) @map("joined_at")
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Flashcard {
  id        String   @id @default(uuid()) @db.Uuid
  question  String   @db.Text
  answer    String   @db.Text
  order     Int
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId    String   @db.Uuid

  @@map("flashcards")
}

model Deck {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  description String?
  userId      String       @db.Uuid
  isPublic    Boolean      @default(false)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  order       Int          @default(0)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcards  Flashcard[]
  deckTags    DeckTag[]
  starCount   Int          @default(0)
  
  @@map("decks")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  color    String    @default("#000000")
  deckTags DeckTag[]

  @@map("tags")
}

model DeckTag {
  deckId String @map("deck_id") @db.Uuid
  tagId  Int    @map("tag_id")
  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@id([deckId, tagId])

  @@map("deck_tags")
}

model Generation {
  id        String   @id @default(uuid()) @db.Uuid
  date      DateTime @default(now())
  count     Int      @default(0)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generations")
}

model Sticker {
  id        String   @id @default(uuid()) @db.Uuid
  imageUrl  String   @db.Text
  position  Json
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stickers")
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @db.Text
  token     String   @unique @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
  @@map("password_reset_tokens")
}